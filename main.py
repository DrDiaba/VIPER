import asyncio
import logging
import re
from datetime import datetime, timedelta
import os

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# ‚úÖ –í–ê–ñ–ù–û: —Å–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è aiogram 3.7+
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

user_timers = {}


def parse_time_input(text: str):
    match = re.match(r'(.+)\s+—á–µ—Ä–µ–∑\s+(\d+)\s*(—Å–µ–∫—É–Ω–¥|–º–∏–Ω—É—Ç|—á–∞—Å(?:–æ–≤)?|—á–∞—Å–∞?)?', text, re.IGNORECASE)
    if not match:
        return None
    name, amount, unit = match.groups()
    amount = int(amount)
    unit = unit.lower() if unit else "—Å–µ–∫—É–Ω–¥"
    if "—Å–µ–∫" in unit:
        delta = timedelta(seconds=amount)
    elif "–º–∏–Ω" in unit:
        delta = timedelta(minutes=amount)
    elif "—á–∞—Å" in unit:
        delta = timedelta(hours=amount)
    else:
        return None
    return name.strip(), delta


@router.message(F.text.startswith("/start"))
async def start_handler(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–∞–π–º–µ—Ä-–±–æ—Ç.\n–ù–∞–ø–∏—à–∏:\n<code>/timer –ù–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç</code>")


@router.message(F.text.startswith("/timer"))
async def timer_handler(message: Message):
    args = message.text[len("/timer "):].strip()
    parsed = parse_time_input(args)

    if not parsed:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ü—Ä–∏–º–µ—Ä: /timer –ß–∞–π–Ω–∏–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç")
        return

    name, delta = parsed
    user_id = message.from_user.id
    timer_id = f"{user_id}_{name}"

    user_timers[timer_id] = datetime.now() + delta
    await message.answer(f"‚úÖ –¢–∞–π–º–µ—Ä <b>{name}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {delta}.")

    await asyncio.sleep(delta.total_seconds())
    await bot.send_message(user_id, f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –¢–∞–π–º–µ—Ä <b>{name}</b> –∑–∞–≤–µ—Ä—à—ë–Ω!")


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
