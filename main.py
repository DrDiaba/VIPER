import logging
import re
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, Update
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web
import asyncio

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (—É–∂–µ —É–∫–∞–∑–∞–Ω –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–¥–µ)
API_TOKEN = "7910875433:AAE54qUwJk5l0yP6nqZ_GyE1eIQ2NzKDpAA"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)

dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
user_timers = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
def parse_time_input(text: str):
    match = re.match(r'(.+)\s+—á–µ—Ä–µ–∑\s+(\d+)\s*(—Å–µ–∫—É–Ω–¥|–º–∏–Ω—É—Ç|—á–∞—Å(?:–æ–≤)?|—á–∞—Å–∞?)?', text, re.IGNORECASE)
    if not match:
        return None
    name, amount, unit = match.groups()
    amount = int(amount)
    unit = unit.lower() if unit else "—Å–µ–∫—É–Ω–¥"
    if "—Å–µ–∫" in unit:
        delta = timedelta(seconds=amount)
    elif "–º–∏–Ω" in unit:
        delta = timedelta(minutes=amount)
    elif "—á–∞—Å" in unit:
        delta = timedelta(hours=amount)
    else:
        return None
    return name.strip(), delta


@router.message(F.text.startswith("/start"))
async def start_handler(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–∞–π–º–µ—Ä-–±–æ—Ç.\n–ù–∞–ø–∏—à–∏:\n<code>/timer –ù–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç</code>")


@router.message(F.text.startswith("/timer"))
async def timer_handler(message: Message):
    args = message.text[len("/timer "):].strip()
    parsed = parse_time_input(args)

    if not parsed:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ü—Ä–∏–º–µ—Ä: /timer –ß–∞–π–Ω–∏–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç")
        return

    name, delta = parsed
    user_id = message.from_user.id
    timer_id = f"{user_id}_{name}"

    user_timers[timer_id] = datetime.now() + delta
    await message.answer(f"‚úÖ –¢–∞–π–º–µ—Ä <b>{name}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {delta}.")

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞
    await asyncio.sleep(delta.total_seconds())
    await bot.send_message(user_id, f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –¢–∞–π–º–µ—Ä <b>{name}</b> –∑–∞–≤–µ—Ä—à—ë–Ω!")


# –í–µ–±—Ö—É–∫ –¥–ª—è Render
async def handle(request):
    json_data = await request.json()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Dispatcher –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫
    update = Update(**json_data)
    await dp.process_update(update)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
async def set_webhook():
    # –£–∫–∞–∑–∞–Ω–∏–µ URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    webhook_url = "https://viper-5e02.onrender.com/webhook"  # URL —Ç–≤–æ–µ–≥–æ Render –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await bot.set_webhook(webhook_url)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
async def on_start(request):
    return web.Response(text="Bot is running!")


# –®–∞–≥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
async def on_shutdown(app):
    await bot.close()


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
async def main():
    app = web.Application()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    app.router.add_get("/", on_start)
    app.router.add_post("/webhook", handle)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    await set_webhook()

    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    app.on_shutdown.append(on_shutdown)
    return app


# –≠—Ç–∞ —á–∞—Å—Ç—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ asyncio.run()
    app = asyncio.get_event_loop().run_until_complete(main())
    web.run_app(app, port=80)
